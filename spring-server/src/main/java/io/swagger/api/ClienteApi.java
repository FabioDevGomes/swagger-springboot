/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.12).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Cliente;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-15T11:06:41.233Z")

@Api(value = "cliente", description = "the cliente API")
@RequestMapping(value = "/fabioivanov/client_api/1.0.0")
public interface ClienteApi {

    @ApiOperation(value = "Altera im cliente existente", nickname = "alterarExistente", notes = "Esta operação tem por objetivo alterar um cliente existente", response = Cliente.class, tags={ "Manutanção", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar um cliente", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração inválida"),
        @ApiResponse(code = 401, message = "Alteração não autorizada"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a auteração") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alterarExistente(@ApiParam(value = "Id do cliente",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);

    @ApiOperation(value = "Alteração de status por id", nickname = "alterarStatusPorId", notes = "Esta operação tem por objetivo alterar o status do cliente pelo seu id", response = Cliente.class, tags={ "Manutanção", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar o status do cliente", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração de status inválida"),
        @ApiResponse(code = 401, message = "Alteração de status não autorizada"),
        @ApiResponse(code = 404, message = "Cliente para alteração de status não encontrado") })
    @RequestMapping(value = "/cliente/{status}/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alterarStatusPorId(@ApiParam(value = "Status do cliente",required=true, allowableValues = "\"ativo\", \"inativo\"") @PathVariable("status") String status,@ApiParam(value = "Valor do id do cliente",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Cadastro de um novo cliente", nickname = "cadastrarCliente", notes = "Esta operação tem por objetivo cadastrar um novo cliente", response = Cliente.class, tags={ "Cadastro", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Sucesso ao cadastrar o novo cliente", response = Cliente.class),
        @ApiResponse(code = 400, message = "Cadastro inválido"),
        @ApiResponse(code = 401, message = "Cadastro não autorizado"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar cadastrar um cliente") })
    @RequestMapping(value = "/cliente",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Cliente> cadastrarCliente(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Excluir cliente existente", nickname = "clienteIdDelete", notes = "Esse endpoint tem por objetivo excluir um cliente existente", tags={ "Exclusão", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Sucesso ao exlcuuir o cliente"),
        @ApiResponse(code = 400, message = "Exclusão inválida"),
        @ApiResponse(code = 401, message = "Exclusão não autorizada"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a exclusão") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> clienteIdDelete(@ApiParam(value = "Número do id do cliente a ser excluído",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Consulta um cliente existente por ID", nickname = "consultaPorId", notes = "Essa consulta tem por objetivo retornar um cliente existente pelo seu Id", response = Cliente.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar um cliente por id", response = Cliente.class),
        @ApiResponse(code = 400, message = "Consulta inválida"),
        @ApiResponse(code = 401, message = "Consulta não autorizada"),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado para esse Id"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar consultar pelo Id") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultaPorId(@ApiParam(value = "Valor do id do cliente",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Consulta cliente existente pelo sobrenome", nickname = "consultaPorSobrenome", notes = "Esta operação tem por objetivo consultar um cliente existente a partir de seu sobrenome", response = Cliente.class, tags={ "Consulta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar o cliente pelo seu sobrenome", response = Cliente.class),
        @ApiResponse(code = 400, message = "Consulta inválida"),
        @ApiResponse(code = 401, message = "Consulta não autorizada"),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado para essa consulta"),
        @ApiResponse(code = 500, message = "Erro interno ao tentar consultar o cliennte pelo sobrenome") })
    @RequestMapping(value = "/cliente/consulta/{sobrenome}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultaPorSobrenome(@ApiParam(value = "Sobrenome do cliente",required=true) @PathVariable("sobrenome") String sobrenome);

}
